/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    id 'application'
	id 'checkstyle'
    id 'com.github.sherter.google-java-format' version '0.9'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}


def getVersionName = {
	-> def stdout = new ByteArrayOutputStream()
	exec {
		workingDir = '../'
		commandLine 'git'
		args = ['describe', '--tags']
		standardOutput = stdout 
	}
	return stdout.toString().trim()
}

group 'chess'
version getVersionName()

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation('org.controlsfx:controlsfx:11.1.0')
    implementation('org.kordamp.ikonli:ikonli-javafx:12.2.0')
}

application {
    mainClass = 'chess.Main'
    mainModule = 'chess'
}

task fatJar(type: Jar) {
	manifest {
        attributes 'Main-Class': 'chess.Main'
    }
	baseName = project.name + '-fat'
	from {
		duplicatesStrategy = 'include'
		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
	}
    with jar
}

javafx {
    version = '18.0.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug','--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

compileJava.configure {
	options.encoding = 'UTF-8'
}

run {
    standardInput = System.in
}

task ci {
	dependsOn tasks.getByName('verifyGoogleJavaFormat')
	dependsOn 'build'
	dependsOn 'test'
	dependsOn 'check'
	dependsOn 'javadoc'
}

test {
    useJUnitPlatform()
    maxParallelForks 3
}

checkstyle {
	toolVersion = "10.2"
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('../config/xsl/checkstyle-simple.xsl')
    }
}
